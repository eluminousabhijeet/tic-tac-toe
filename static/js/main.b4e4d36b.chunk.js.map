{"version":3,"sources":["components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","color","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","includes","Container","position","Row","Col","md","lg","Button","block","onClick","map","item","index","Card","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4e4d36b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { FaTimes, FaPen, FaRegCircle } from 'react-icons/fa'\r\n\r\nconst Icon = ({ name }) => {\r\n    switch (name) {\r\n        case 'circle':\r\n            return <FaRegCircle color=\"black\" className=\"icon\" />\r\n            break\r\n\r\n        case 'cross':\r\n            return <FaTimes  color=\"black\" className=\"icon\" />\r\n            break\r\n\r\n        default:\r\n            return <FaPen color=\"black\" className=\"icon\" />\r\n            break\r\n\r\n    }\r\n}\r\n\r\nexport default Icon\r\n","import React, { useState } from 'react'\r\nimport Icon from './components/Icon'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Card, CardBody, Container, Button, Col, Row } from 'reactstrap'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './App.css'\r\n\r\nconst itemArray = new Array(25).fill(\"empty\")\r\n\r\nconst App = () => {\r\n\r\n    const [isCross, setIsCross] = useState(false)\r\n    const [winMessage, setWinMessage] = useState(\"\")\r\n\r\n    const reloadGame = () => {\r\n        setIsCross(false)\r\n        setWinMessage(\"\")\r\n        itemArray.fill(\"empty\", 0, 25)\r\n    }\r\n\r\n    const checkIsWinner = () => {\r\n        if (!itemArray.includes(\"empty\")) {\r\n            setWinMessage(\"Match draw\")\r\n        } else {\r\n            if (itemArray[0] === itemArray[1] &&\r\n                itemArray[1] === itemArray[2] &&\r\n                itemArray[2] === itemArray[3] &&\r\n                itemArray[3] === itemArray[4] &&\r\n                itemArray[0] !== \"empty\") {\r\n                setWinMessage(`${itemArray[0]} wins`)\r\n            } else if (itemArray[5] === itemArray[6] &&\r\n                itemArray[6] === itemArray[7] &&\r\n                itemArray[7] === itemArray[8] &&\r\n                itemArray[8] === itemArray[9] &&\r\n                itemArray[5] !== \"empty\") {\r\n                setWinMessage(`${itemArray[3]} wins`)\r\n            } else if (itemArray[10] === itemArray[11] &&\r\n                itemArray[11] === itemArray[12] &&\r\n                itemArray[12] === itemArray[13] &&\r\n                itemArray[13] === itemArray[14] &&\r\n                itemArray[10] !== \"empty\") {\r\n                setWinMessage(`${itemArray[6]} wins`)\r\n            } else if (itemArray[15] === itemArray[16] &&\r\n                itemArray[16] === itemArray[17] &&\r\n                itemArray[17] === itemArray[18] &&\r\n                itemArray[18] === itemArray[19] &&\r\n                itemArray[15] !== \"empty\") {\r\n                setWinMessage(`${itemArray[6]} wins`)\r\n            }else if (itemArray[20] === itemArray[21] &&\r\n                itemArray[21] === itemArray[22] &&\r\n                itemArray[22] === itemArray[23] &&\r\n                itemArray[23] === itemArray[24] &&\r\n                itemArray[20] !== \"empty\") {\r\n                setWinMessage(`${itemArray[6]} wins`)\r\n            }\r\n\r\n            else if (itemArray[0] === itemArray[5] &&\r\n                itemArray[5] === itemArray[10] &&\r\n                itemArray[10] === itemArray[15] &&\r\n                itemArray[15] === itemArray[20] &&\r\n                itemArray[0] !== \"empty\") {\r\n                setWinMessage(`${itemArray[0]} wins`)\r\n            } else if (itemArray[1] === itemArray[6] &&\r\n                itemArray[6] === itemArray[11] &&\r\n                itemArray[11] === itemArray[16] &&\r\n                itemArray[16] === itemArray[21] &&\r\n                itemArray[1] !== \"empty\") {\r\n                setWinMessage(`${itemArray[1]} wins`)\r\n            } else if (itemArray[2] === itemArray[7] &&\r\n                itemArray[7] === itemArray[12] &&\r\n                itemArray[12] === itemArray[17] &&\r\n                itemArray[17] === itemArray[22] &&\r\n                itemArray[2] !== \"empty\") {\r\n                setWinMessage(`${itemArray[2]} wins`)\r\n            } else if (itemArray[3] === itemArray[8] &&\r\n                itemArray[8] === itemArray[13] &&\r\n                itemArray[13] === itemArray[18] &&\r\n                itemArray[18] === itemArray[23] &&\r\n                itemArray[3] !== \"empty\") {\r\n                setWinMessage(`${itemArray[2]} wins`)\r\n            } else if (itemArray[4] === itemArray[9] &&\r\n                itemArray[9] === itemArray[14] &&\r\n                itemArray[14] === itemArray[19] &&\r\n                itemArray[19] === itemArray[24] &&\r\n                itemArray[4] !== \"empty\") {\r\n                setWinMessage(`${itemArray[2]} wins`)\r\n            }\r\n\r\n            else if (itemArray[0] === itemArray[6] &&\r\n                itemArray[6] === itemArray[12] &&\r\n                itemArray[12] === itemArray[18] &&\r\n                itemArray[18] === itemArray[24] &&\r\n                itemArray[0] !== \"empty\") {\r\n                setWinMessage(`${itemArray[0]} wins`)\r\n            } else if (itemArray[4] === itemArray[8] &&\r\n                itemArray[8] === itemArray[12] &&\r\n                itemArray[12] === itemArray[16] &&\r\n                itemArray[16] === itemArray[20] &&\r\n                itemArray[4] !== \"empty\") {\r\n                setWinMessage(`${itemArray[2]} wins`)\r\n            }\r\n        }\r\n    }\r\n\r\n    const changeItem = itemNumber => {\r\n        if (winMessage) {\r\n            return toast(winMessage, { type: \"success\" })\r\n        }\r\n\r\n        if (itemArray[itemNumber] == \"empty\") {\r\n            itemArray[itemNumber] = isCross ? \"cross\" : \"circle\"\r\n            setIsCross(!isCross)\r\n        } else {\r\n            return toast(\"Already Filled\", { type: \"error\" })\r\n        }\r\n\r\n        checkIsWinner()\r\n    }\r\n\r\n    return (\r\n        <Container className=\"py-5\">\r\n            <ToastContainer position=\"bottom-center\" />\r\n            <Row className=\"justify-content-center\">\r\n                <Col md={8} lg={6}>\r\n                    {winMessage ? (\r\n                        <div className=\"my-2\">\r\n                            <h2 className=\"text-success text-uppercase text-center\">\r\n                                {winMessage}\r\n                            </h2>\r\n                            <Button\r\n                                className=\"my-5\"\r\n                                color=\"success\"\r\n                                block\r\n                                onClick={reloadGame}\r\n                            >Reload Game</Button>\r\n                        </div>\r\n                    ) : (\r\n                        <h2 className=\"text-center text-warning mb-5\">\r\n                            {isCross ? \"Cross\" : \"Circle\"} turns\r\n                        </h2>\r\n                    )}\r\n                    <div className=\"grid\">\r\n                        {\r\n                            itemArray.map((item, index) => {\r\n                                return <Card color={item == \"empty\" ? \"warning\" : item == \"circle\" ? \"primary\" : \"danger\"} key={index} onClick={() => changeItem(index)}>\r\n                                    <CardBody className=\"box\">\r\n                                        <Icon name={item} />\r\n                                    </CardBody>\r\n                                </Card>\r\n                            })\r\n                        }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}